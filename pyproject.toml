[tool.poetry]
name = "litestar"
version = "2.0.0alpha4"
description = "Performant, light and flexible ASGI API Framework"
authors = [
    "Na'aman Hirschfeld <nhirschfeld@gmail.com>",
    "Peter Schutt <peter.github@proton.me>",
    "Cody Fincher <cody.fincher@gmail.com>",
    "Janek Nouvertné <provinzkraut@posteo.de>",
]
maintainers = [
    "Na'aman Hirschfeld <nhirschfeld@gmail.com>",
    "Peter Schutt <peter.github@proton.me>",
    "Cody Fincher <cody.fincher@gmail.com>",
    "Janek Nouvertné <provinzkraut@posteo.de>",
]
license = "MIT"
readme = "README.md"
homepage = "https://litestar.dev/"
repository = "https://github.com/litestar-org/litestar"
documentation = "https://docs.litestar.dev/"
keywords = [
    "api",
    "rest",
    "http",
    "asgi",
    "pydantic",
    "litestar",
    "starlite",
    "framework",
    "websocket",
    "litestar",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
]
include = ["CHANGELOG.rst"]
packages = [{ include = "litestar" }]

[tool.poetry.dependencies]
python = ">=3.8,<4.0"
alembic = { version = "*", optional = true }
anyio = ">=3"
attrs = { version = "*", optional = true }
brotli = { version = "*", optional = true }
cattrs = { version = "*", optional = true }
click = { version = "*", optional = true }
cryptography = { version = "*", optional = true }
fast-query-parsers = "*"
httpx = ">=0.22"
importlib-metadata = { version = "*", python = "<3.10" }
jinja2 = { version = ">=3.1.2", optional = true }
jsbeautifier = { version = "*", optional = true }
mako = { version = ">=1.2.4", optional = true }
msgspec = "*"
multidict = ">=6.0.2"
opentelemetry-instrumentation-asgi = { version = "*", optional = true }
picologging = { version = "*", optional = true }
polyfactory = {version = ">=2.0.0a1", allow-prereleases = true}
pydantic = "<2"
python-dateutil = { version = "*", optional = true }
python-jose = { version = "*", optional = true }
pytimeparse = { version = "*", optional = true }
pyyaml = "*"
redis = { version = ">=4.4.4,!=4.5.0,!=4.5.1,!=4.5.2,!=4.5.3", optional = true, extras = ["hiredis"] }
rich = { version = ">=13.0.0", optional = true }
sqlalchemy = { version = ">=2.0.4", optional = true }
structlog = { version = "*", optional = true }
typing-extensions = "*"

[tool.poetry.group.dev.dependencies]
aiosqlite = "*"
asyncpg = "*"
attrs = "*"
beautifulsoup4 = "*"
brotli = "*"
cattrs = "*"
click = "*"
cryptography = "*"
fakeredis = { extras = ["lua"], version = ">=2.10.2" }
freezegun = "*"
fsspec = "*"
greenlet = "*"
hypothesis = "*"
jinja2 = "*"
jsbeautifier = "*"
mako = "*"
mongomock-motor = { version = "*", markers = "sys_platform != 'win32'" }
opentelemetry-instrumentation-asgi = "*"
opentelemetry-sdk = "*"
piccolo = "*"
picologging = "*"
pre-commit = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-lazy-fixture = "*"
pytest-mock = "*"
pytest_docker = "*"
python-dateutil = "*"
python-dotenv = "*"
python-jose = "*"
pytimeparse = "*"
redis = "*"
rich = "*"
sqlalchemy = ">=2.0"
starlette = "*"
structlog = "*"
tortoise-orm = ">=0.17.0"
trio = "*"
uvicorn = "*"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
auto-pytabs = { extras = ["sphinx"], version = "*" }
black = "*"
httpx = "*"
sphinx = ">=5.3.0,<=6"
sphinx-autobuild = "*"
sphinx-copybutton = ">=0.5.1"
sphinx-design = ">=0.3.0,<1"
sphinxcontrib-mermaid = ">=0.8.1,<1"
litestar-sphinx-theme = { git = "https://github.com/litestar-org/litestar-sphinx-theme.git" }
uvicorn = "*"

[tool.poetry.extras]
attrs = ["attrs", "cattrs", "python-dateutil", "pytimeparse"]
brotli = ["brotli"]
cli = ["click", "rich", "jsbeautifier", "uvicorn"]
cryptography = ["cryptography"]
jinja = ["jinja2"]
jwt = ["python-jose", "cryptography"]
opentelemetry = ["opentelemetry-instrumentation-asgi"]
picologging = ["picologging"]
redis = ["redis"]
sqlalchemy = ["sqlalchemy", "alembic"]
standard = ["click", "jinja2", "jsbeautifier", "rich"]
structlog = ["structlog"]
tortoise-orm = ["tortoise-orm"]

full = [
    "brotli",
    "click",
    "cryptography",
    "jinja2",
    "jsbeautifier",
    "opentelemetry-instrumentation-asgi",
    "picologging",
    "python-jose",
    "redis",
    "rich",
    "structlog",
    "tortoise-orm",
]

[tool.poetry.scripts]
litestar = { callable = "litestar:__main__", extras = ["cli"] }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
include = '\.pyi?$'

[tool.coverage.run]
omit = ["*/tests/*", "litestar/contrib/sqlalchemy_1/*"]

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'if TYPE_CHECKING:',
    'except ImportError as e:',
    'except ImportError:',
    '\.\.\.',
    'raise NotImplementedError',
]

[tool.pytest.ini_options]
addopts = "--ignore=examples"
asyncio_mode = "auto"
filterwarnings = [
    "ignore::trio.TrioDeprecationWarning:anyio._backends._trio*:164",
    "ignore::DeprecationWarning:pkg_resources:2803",
]

[tool.pyright]
include = ["litestar", "tests", "examples"]
exclude = [
    "examples/plugins/sqlalchemy_plugin",
    "litestar/contrib/sqlalchemy_1",
    "litestar/openapi",
    "litestar/plugins",
    "tests/contrib/sqlalchemy_1",
    "tests/openapi",
    "tests/plugins",
]

[tool.slotscheck]
strict-imports = false

[tool.ruff]
select = [
    "A", # flake8-builtins
    "B",   # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90", # mccabe
    "D",   # pydocstyle
    "DJ",  # flake8-django
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle errors
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F",   # pyflakes
    "G",   # flake8-logging-format
    "I",   # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PLC", # pylint - convention
    "PLE", # pylint - error
    "PLW", # pylint - warning
    "PTH", # flake8-use-pathlib
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",   # pycodestyle - warning
    "YTT", # flake8-2020
]

ignore = [
    "A003",  # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B010",  # flake8-bugbear - do not call setattr with a constant attribute value
    "D100",  # pydocstyle - missing docstring in public module
    "D101",  # pydocstyle - missing docstring in public class
    "D102",  # pydocstyle - missing docstring in public method
    "D103",  # pydocstyle - missing docstring in public function
    "D104",  # pydocstyle - missing docstring in public package
    "D105",  # pydocstyle - missing docstring in magic method
    "D106",  # pydocstyle - missing docstring in public nested class
    "D107",  # pydocstyle - missing docstring in __init__
    "D202",  # pydocstyle - no blank lines allowed after function docstring
    "D205",  # pydocstyle - 1 blank line required between summary line and description
    "D415",  # pydocstyle - first line should end with a period, question mark, or exclamation point
    "E501",  # pycodestyle line too long, handled by black
    "UP037", # pyupgrade - removes quotes from type annotation
]
line-length = 120
src = ["litestar", "tests", "docs/examples"]
target-version = "py38"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.root_validator",
    "pydantic.validator",
    "sqlalchemy.ext.declarative.declared_attr",
    "sqlalchemy.orm.declared_attr.directive",
]

[tool.ruff.isort]
known-first-party = ["litestar", "tests", "examples"]

[tool.ruff.per-file-ignores]
"tests/**/*.*" = [
    "A",
    "ARG",
    "B",
    "BLE",
    "C901",
    "D",
    "DTZ",
    "EM",
    "FBT",
    "G",
    "N",
    "PGH",
    "PIE",
    "PLR",
    "PLW",
    "PTH",
    "RSE",
    "S",
    "S101",
    "SIM",
    "TCH",
    "TRY",
]
"docs/examples/application_hooks/before_send_hook.py" = ["UP006"]
"docs/examples/tests/**/*.*" = [
    "A",
    "ARG",
    "B",
    "BLE",
    "C901",
    "D",
    "DTZ",
    "EM",
    "FBT",
    "G",
    "N",
    "PGH",
    "PIE",
    "PLR",
    "PLW",
    "PTH",
    "RSE",
    "S",
    "S101",
    "SIM",
    "TCH",
    "TRY",
]
"docs/**/*.*" = ["S", "B", "DTZ", "A", "TCH", "ERA", "D", "RET"]
"docs/examples/**" = ["T201"]
"litestar/exceptions/*.*" = ["N818"]
"litestar/handlers/**/*.*" = ["N801"]
"litestar/_openapi/schema_generation/schema.py" = ["C901"]
"litestar/params.py" = ["N802"]
"test_apps/**/*.*" = ["D", "TRY", "EM", "S", "PTH"]
"tools/**/*.*" = ["D", "ARG", "EM", "TRY", "G", "FBT"]
